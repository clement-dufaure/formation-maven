[{"content":"","date":"0001-01-01","id":0,"permalink":"/docs/sans-maven/","summary":"","tags":[],"title":"Sans Maven"},{"content":"","date":"0001-01-01","id":1,"permalink":"/docs/commencer-avec-maven/","summary":"","tags":[],"title":"Commencer avec Maven"},{"content":"","date":"0001-01-01","id":2,"permalink":"/docs/compl%C3%A9ments/","summary":"","tags":[],"title":"Compléments"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":3,"permalink":"/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":4,"permalink":"/blog/","summary":"","tags":[],"title":"Blog"},{"content":"Qu\u0026rsquo;est ce que \u0026ldquo;builder un projet\u0026rdquo; ??\nou De quoi va-t-on parler ?\nExécuter du code java Exécuter conjointement plusieurs classes ensemble Utiliser du code de biliothèques externes Changer la version d\u0026rsquo;un bibliothèque Préparer un déploiement : fournir un jar/war Lancer des tests unitaires ? Compiler son code Compilation d\u0026rsquo;une classes javac ./sources/re/dufau/demo/model/User.java -d ./build/classes javac ./sources/re/dufau/demo/dao/UserDao.java -d ./build/classes\r1er problème : les classes s\u0026rsquo;appellent entre elles\nCompilation de plusieurs classes \u0026ldquo;ensemble\u0026rdquo; echo sources/re/dufau/demo/dao/UserDao.java \u0026gt; ./build/sources.txt echo sources/re/dufau/demo/model/User.java \u0026gt;\u0026gt; ./build/sources.txt javac @./build/sources.txt -d ./build/classes\rCompilation de toutes les classes find sources -name \u0026#34;*.java\u0026#34; \u0026gt; ./build/sources.txt javac @./build/sources.txt -d ./build/classes 2e problème : le dev a utilisé des bibliothèques externes\n-\u0026gt; Il faut télécharger les librairies nécessaires : création du classpath avec les jar externes requis\nfind src -name \u0026#34;*.java\u0026#34; \u0026gt; ./build/sources.txt javac @./build/sources.txt -d ./build/classes -cp \u0026#34;./classpath/cmain/*\u0026#34;\r3e problème : les jars que l\u0026rsquo;on récupère ont eux aussi des dépendances\u0026hellip; Bienvenue aux dépendances transitives :\nIl faut le savoir (doc de la lib) et les rajouter dans le classpath Il faut faire attention au croisement des version, on ne pourra mettre qu\u0026rsquo;une version de chaque fichier .class au risque de conflits\nEt si on doit changer la version, il faut tout recommencer\u0026hellip; ajouter/retirer un fichier jar dans le classpath\u0026hellip; et adapter les transitives\nRemarque : on peut préciser la version de java dans laquelle est écrite java et la version de compilation des fichiers compilés\njavac @./build/sources.txt -d ./build/classes -source 11 -target 11\rCréation du livrable \u0026ldquo;livrable\u0026rdquo; = moyen de tranfert standard\nle JAR = java archive C\u0026rsquo;est un zip contenant les classes compilées (et des métadonnées dans un dossier META-INF) Il permet l\u0026rsquo;échange de code (bibliothèque de dépendance). Il peut être excutable : présence d\u0026rsquo;une méthode main(), lancement via java -jar META-INF/\rMANIFEST.MF\rre/\rdufau/\rdemo/\rmodel/\rUser.class\r...\rle WAR = web application archive C\u0026rsquo;est un zip contenant les classes compilées et les fichiers web (jsp/html/css\u0026hellip;). C\u0026rsquo;est un \u0026ldquo;bout\u0026rdquo; d\u0026rsquo;application, le reste de l\u0026rsquo;appli (dont le main()) se trouvant dans un conteneur d\u0026rsquo;application comme tomcat. Le war n\u0026rsquo;est pas prévu pour s\u0026rsquo;éxécuter seul. META-INF/\rMANIFEST.MF\rWEB-INF/\rweb.xml\rconfig-spring.xml\rstatic/\rcss/\rstyle.css\rimg/\rimage.png\r...\rclasses/\rre/\rdufau/\rdemo/\rmodel/\rUser.class\r...\rlib/\rdependance1.jar\rdependance2.jar\r...\rPour créer ces livrables, on peut passer par la commande jar\nFaire fonctionner le projet dans l\u0026rsquo;IDE Dans l\u0026rsquo;IDE, ca compile pas ?\nL\u0026rsquo;IDE compile à la volée (javac) pour nous dire si tout va bien Il faut donc qu\u0026rsquo;il connaisse le classpath, à paramétrer à la main\u0026hellip; Si je transmet mon code l\u0026rsquo;autre dev doit tout reparamétrer\u0026hellip; Lancer les tests Logique similaire à l\u0026rsquo;éxécution de mon code\nOn va devoir compiler les classes de tests Ces classes de tests vont dépendre de mon code \u0026ldquo;runtime\u0026rdquo; des dépendances de mon code \u0026ldquo;runtime\u0026rdquo; de dépendances spécifiques à l\u0026rsquo;éxécution des tests Ce qui donne :\njavac ./test/re/dufau/demo/dao/UserDaoTest.java -d ./build/test-classes/ -cp \u0026#34;./build/classes;./classpath/test/*\u0026#34; java -jar ./lib/test/junit-platform-console-standalone-1.10.1.jar -cp \u0026#34;./classpath/main/;./classpath/test/;./build/test-classes/;./build/classes/\u0026#34; --select-class re.dufau.demo.dao.UserDaoTest\rAvez vous envie de lancer toutes ces commandes à chaque build ? Si la réponse est non, on peut poursuivre. Des outils cherchent à faciliter et automatiser ces étapes.\nAnt\nMaven\nGradl\nAnt\nConfiguration XML Les tâches précitées sont explicitées sont la forme d\u0026rsquo;un xml, tout doit être décrit Approche impérative Maven\nConfiguration XML La logique de maven repose sur des conventions, sous réserve d\u0026rsquo;avoir une architecture de code aux stardards maven, un fichier de configuration toujours au format xml assez minimal permet de réaliser les opération précitées. Les principales opérations seront ainsi sous-entendues (non explicitées dans la conf). Logique de dépendances avec référentiel Approche déclarative Gradl\nApproche impérative mais avec langage JVM (Groovy/Kotlin) Repose également sur un système de référentiel pour les dépendances Au delà des opérations essentielles précentées les outils vont permettre de réaliser une multiplicité de tâches. Avec la présence quasi systèmatique de pipeline CI/CD sur nos applications, il faudra parfois choisir entre intégrer certaines tâches à travers l\u0026rsquo;outils de buils choisi, ou directement en opérations CI/CD\n","date":"0001-01-01","id":5,"permalink":"/docs/sans-maven/sans-maven/","summary":"\u003cp\u003eQu\u0026rsquo;est ce que \u0026ldquo;builder un projet\u0026rdquo; ??\u003c/p\u003e\n\u003cp\u003eou \u003cem\u003eDe quoi va-t-on parler ?\u003c/em\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eExécuter du code java\u003c/li\u003e\n\u003cli\u003eExécuter conjointement plusieurs classes ensemble\u003c/li\u003e\n\u003cli\u003eUtiliser du code de biliothèques externes\u003c/li\u003e\n\u003cli\u003eChanger la version d\u0026rsquo;un bibliothèque\u003c/li\u003e\n\u003cli\u003ePréparer un déploiement : fournir un jar/war\u003c/li\u003e\n\u003cli\u003eLancer des tests unitaires ?\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"compiler-son-code\"\u003eCompiler son code\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eCompilation d\u0026rsquo;une classes\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame is-terminal not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-sh\" data-lang=\"sh\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ejavac ./sources/re/dufau/demo/model/User.java -d ./build/classes\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003ejavac ./sources/re/dufau/demo/dao/UserDao.java -d ./build/classes\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003e1er problème : les classes s\u0026rsquo;appellent entre elles\u003c/p\u003e","tags":[],"title":"Comment builder un projet avec uniquement le JDK ?"},{"content":"L\u0026rsquo;exécutable maven Installation de maven Maven est un programme écrit en java, l\u0026rsquo;environnement java doit être correctement paramétré (soit via la variable d\u0026rsquo;environnement JAVA_HOME, soit en ayant correctement configuré java dans le path)\nTélécharger et extraire l\u0026rsquo;archive sur le site de maven (https://maven.apache.org/download.cgi). Ajouter le dossier /bin au path pour une exécution en ligne de commande mvn -v\rLe maven wrapper Les projets peuvent intégrer directement l\u0026rsquo;exécutable maven dans leurs sources. Cela permet de s\u0026rsquo;assurer de la présence de maven et de la version d\u0026rsquo;éxécution de maven.\n./mvnw -v\rConfiguration générale Propre à votre environnement de travail, autrement dit, commune à tout les projets Dans le répertoire d\u0026rsquo;installation : /conf/settings.xml -\u0026gt; Eviter de modifier celui la, il est propre uniquement à cette installation Il vaut mieux le surcharger par le fichier settings.xml dans %USERPROFILE%/.m2 ou $HOME/.m2 Il sera alors commun à toutes les installations et également aux wrappers Execution mvn --help\rusage: mvn [options] [\u0026lt;goal(s)\u0026gt;] [\u0026lt;phase(s)\u0026gt;]\rgoals : actions spécifiques unitaires, ils sont inclus dans des plugins maven phase : correspond aux étapes du cycle de vie du build de l\u0026rsquo;application ","date":"0001-01-01","id":6,"permalink":"/docs/commencer-avec-maven/installer-et-ex%C3%A9cuter-maven/","summary":"\u003ch1 id=\"lexécutable-maven\"\u003eL\u0026rsquo;exécutable maven\u003c/h1\u003e\n\u003ch2 id=\"installation-de-maven\"\u003eInstallation de maven\u003c/h2\u003e\n\u003cp\u003eMaven est un programme écrit en java, l\u0026rsquo;environnement java doit être correctement paramétré (soit via la variable d\u0026rsquo;environnement JAVA_HOME, soit en ayant correctement configuré java dans le path)\u003c/p\u003e","tags":[],"title":"Installer et exécuter maven"},{"content":"Les plugins et goals Dans maven, tout est plugin. Les plugins contiennent le code des exécutions exposés comme \u0026ldquo;goals\u0026rdquo;. Une exécution se déclenche avec la syntaxe :\nmvn nom-du-plugin:version:nom-du-goal\rSi le nom du plugin correspond à la syntaxe maven-PPP-plugin, si une version est défini dans le pom (on voir ça plus tard), on peut plus simplement l\u0026rsquo;appeler :\nmvn PPP:nom-du-goal\rPar exemple, la compilation du code se fait avec le plugin maven-compiler-plugin, il possède deux goals compile pour compiler le code principal et testCompile pour compiler le code de test. On va appeller ces deux goals :\nmvn compiler:compile mvn compiler:testCompile\rCependant la plupart du temps on souhaite enchaîner logiquement plusieurs goals.\nLe cycle de vie du build Maven décrit plusieurs enchaînements de phase décrivant les étapes fines de contruction d\u0026rsquo;un projet.\nLifecycle Reference\nmvn nom-de-la-phase\rlancera l\u0026rsquo;ensemble des phases préalables à la phase demandée en plus de celle-ci.\nOn peut alors associer des goals à certaines phases. Par défaut, un certain nombre de goals sont déjà associé à certaines phases.\nBuilt-in_Lifecycle_Bindings\nMême si on peut théoriquement appeler toutes les phases, on appelle généralement les phases suivantes :\nvalidate - Valide la configuration du projet. compile - Compile le code source test - Test le projet package - Crée un fichier livrable verify - Vérifie le projet (tests d\u0026rsquo;intégration) install - Installe le livrable dans le dépot local deploy - Déploie le livrable dans le dépot distant Configuration et conventions Maven fonctionne par conventions. Suivre ces conventions permet de limiter le nombre de configurations à expliciter.\nArchitecture standard d\u0026rsquo;un projet Maven projet-maven\r|-- pom.xml : fichier de configuration\r|-- src\r| |-- main\r| | |-- java : le code java principal\r| | | `-- re\r| | | `-- dufau\r| | | `-- App.java\r| | |-- resources : les fichiers non java devant être ajoutés au livrable\r| | `-- webapp : les ressources WEB dans le cas d\u0026#39;un war\r| `-- test\r| |-- java : le code java de test\r| | `-- re\r| | `-- dufau\r| | `-- AppTest.java\r| `-- resources : les fichiers non java nécessaires à l\u0026#39;éxécution des tests\r|\r`-- target : le répertoire de travail de maven\r|-- classes\r| `-- re\r| `-- dufau\r| `-- App.class\r[...]\r|-- surefire-reports\r| |-- TEST-re.dufau.AppTest.xml\r| `-- re.dufau.AppTest.txt\r`-- test-classes\r`-- re\r`-- dufau\r`-- AppTest.class\r\u0026#x26a0;\u0026#xfe0f; on ne veut pas partager le dossier target =\u0026gt; à ajouter au .gitignore\nLe fichier de configuration : le POM Même avec les conventions respectés, sa présence est nécessaire pour que maven considère le projet comme projet maven.\n","date":"0001-01-01","id":7,"permalink":"/docs/commencer-avec-maven/bases-de-fonctionnement-de-maven/","summary":"\u003ch1 id=\"les-plugins-et-goals\"\u003eLes plugins et goals\u003c/h1\u003e\n\u003cp\u003eDans maven, tout est plugin.\nLes plugins contiennent le code des exécutions exposés comme \u0026ldquo;goals\u0026rdquo;.\nUne exécution se déclenche avec la syntaxe :\u003c/p\u003e","tags":[],"title":"Bases de fonctionnement de maven"},{"content":"Référence\nLe minimum \u0026lt;project xmlns=\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u0026gt; \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt; \u0026lt;groupId\u0026gt;re.dufau\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt; \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt; \u0026lt;/project\u0026gt;\rLes coordonnées maven pour assurer l\u0026rsquo;unicité d\u0026rsquo;un artifact globalement :\ngroupId : identifiant de l\u0026rsquo;organisation, de l\u0026rsquo;équipe réalisatrice, etc artifactId : le nom du projet/de l\u0026rsquo;application (ou du module dans le cas de projets multimodule) version : la version de l\u0026rsquo;artifact produit Le principe de convention cache l\u0026rsquo;existence d\u0026rsquo;un super POM contenant toutes les valeurs par défaut dont :\nla déclaration de tous le chemins présentés dans l\u0026rsquo;architecture par défaut (src/main/java, src/main/resource, target, \u0026hellip;) les plugins par défaut et leur mappings dans le cycle de vie On peut voir notre POM effectif avec :\nmvn help:effective-pom\rLe type d\u0026rsquo;artifact à construire \u0026lt;packaging\u0026gt;jar\u0026lt;/packaging\u0026gt;\r\u0026lt;packaging\u0026gt;war\u0026lt;/packaging\u0026gt;\rPermet à maven de lier les phases de build à certains plugins, et notemment la phase de packaging.\nVoir les associations\nDéclaration des dépendances \u0026lt;dependencies\u0026gt; \u0026lt;dependancy\u0026gt; ... \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt;\rVers la partie dédiée\nProperties Permettent de variabiliser dépendances, plugin ou généralement toute autre configuration de maven. Elles peuvent être personnalisées pour centraliser certaines configurations comme les versions.\nLa version de java Quelquesoit le jdk que l\u0026rsquo;on a installé, on peut souhaiter préciser la source dans laquelle est écrite le code et la version dans laquelle on va le compiler. Par exemple, j\u0026rsquo;ai un jdk 21 mais je sais que mon environnement d\u0026rsquo;éxécution sera en 17.\nIl faut non seulement que je compile mon code en 17 (la jre 17 de l\u0026rsquo;éxécution refusera un code compilé en 21), ce qui signifie également que je ne dois écrire que des éléments de code existant en java 17 (même si mon jdk connait la syntaxe 21, il doit les considérer comme des erreurs).\nCes deux éléments correspondent aux deux options de javac :\njavac ... -source 17 -target 17\rOn va préciser ces élement à maven via les properties (qui seront injectées dans le plugin compiler)\n\u0026lt;properties\u0026gt; \u0026lt;maven.compiler.source\u0026gt;17\u0026lt;/maven.compiler.source\u0026gt; \u0026lt;maven.compiler.target\u0026gt;17\u0026lt;/maven.compiler.target\u0026gt; \u0026lt;/properties\u0026gt;\rou comme génralement, on met la même version dans les deux :\n\u0026lt;properties\u0026gt; \u0026lt;maven.compiler.release\u0026gt;17\u0026lt;/maven.compiler.release\u0026gt; \u0026lt;/properties\u0026gt;\rou si le projet est en Spring Boot :\n\u0026lt;properties\u0026gt; \u0026lt;java.version\u0026gt;17\u0026lt;/java.version\u0026gt; \u0026lt;/properties\u0026gt;\rAttention, par défaut maven compile en une vieille version de java (\u0026lt;=1.8)\nL\u0026rsquo;encodage Il s\u0026rsquo;agit d\u0026rsquo;indiquer à maven quel est l\u0026rsquo;encodage des fichier qu\u0026rsquo;il va lire, et dans quel encodage il doit écrire les fichier non compilés (ressourecs) :\n\u0026lt;properties\u0026gt; \u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt; \u0026lt;project.reporting.outputEncoding\u0026gt;UTF-8\u0026lt;/project.reporting.outputEncoding\u0026gt; \u0026lt;/properties\u0026gt;\rProperties personnalisées accessible depuis le reste du pom (${prop}) surchargeable par un argument en ligne de commande -Dkey=value \u0026lt;properties\u0026gt; \u0026lt;ma-lib.version\u0026gt;1.2.3\u0026lt;/ma-lib.version\u0026gt; \u0026lt;ma-propriete\u0026gt;something\u0026lt;/ma-propriete\u0026gt; \u0026lt;/properties\u0026gt; ... \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;ma\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;lib\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${ma-lib.version}\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt;\rCertaines propriétés sont autmatiques telles que ${project.version} donnant la valeur de la balise version du projet.\nLes properties peuvent être injectées dans les ressources, c\u0026rsquo;est le filtering\nhttps://maven.apache.org/plugins/maven-resources-plugin/examples/filter.html\n\u0026lt;resource\u0026gt; \u0026lt;directory\u0026gt;src/main/resources\u0026lt;/directory\u0026gt; \u0026lt;filtering\u0026gt;true\u0026lt;/filtering\u0026gt; \u0026lt;/resource\u0026gt;\rWarning: Do not filter files with binary content like images! This will most likely result in corrupt output.\nLes paramètre de build L\u0026rsquo;ensemble des paramètre dont une grande partie devrait rester implicite\n\u0026lt;build\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/target\u0026lt;/directory\u0026gt; \u0026lt;outputDirectory\u0026gt;${project.build.directory}/classes\u0026lt;/outputDirectory\u0026gt; \u0026lt;finalName\u0026gt;${project.artifactId}-${project.version}\u0026lt;/finalName\u0026gt; \u0026lt;testOutputDirectory\u0026gt;${project.build.directory}/test-classes\u0026lt;/testOutputDirectory\u0026gt; \u0026lt;sourceDirectory\u0026gt;${project.basedir}/src/main/java\u0026lt;/sourceDirectory\u0026gt; \u0026lt;scriptSourceDirectory\u0026gt;src/main/scripts\u0026lt;/scriptSourceDirectory\u0026gt; \u0026lt;testSourceDirectory\u0026gt;${project.basedir}/src/test/java\u0026lt;/testSourceDirectory\u0026gt; \u0026lt;resources\u0026gt; \u0026lt;resource\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/src/main/resources\u0026lt;/directory\u0026gt; \u0026lt;/resource\u0026gt; \u0026lt;/resources\u0026gt; \u0026lt;testResources\u0026gt; \u0026lt;testResource\u0026gt; \u0026lt;directory\u0026gt;${project.basedir}/src/test/resources\u0026lt;/directory\u0026gt; \u0026lt;/testResource\u0026gt; \u0026lt;/testResources\u0026gt; \u0026lt;plugins\u0026gt;...\u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt;\rGénéralement, on va surtout personnaliser uniquement cette dernière balise de plugin pour ajouter des plugins et leurs goals dans le cycle de vie.\nVers la partie dédiée\nLes profils Il est possible de cumuler plusieurs configurations de build concurrentes via les profils, il sont ensuite appelable via la ligne de commande maven -Pnomprofil\n\u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;nomprofil\u0026lt;/id\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;ma.conf\u0026gt;maConfDeQf\u0026lt;/ma.conf\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;build\u0026gt; ... \u0026lt;/build\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt; Ils peuvent également s\u0026#39;activer sous conditions ```xml \u0026lt;profiles\u0026gt; \u0026lt;profile\u0026gt; \u0026lt;id\u0026gt;linux\u0026lt;/id\u0026gt; \u0026lt;activation\u0026gt; \u0026lt;jdk\u0026gt;1.5\u0026lt;/jdk\u0026gt; \u0026lt;os\u0026gt; \u0026lt;family\u0026gt;!windows\u0026lt;/family\u0026gt; \u0026lt;/os\u0026gt; \u0026lt;/activation\u0026gt; \u0026lt;properties\u0026gt; \u0026lt;linux\u0026gt;true\u0026lt;/linux\u0026gt; \u0026lt;/properties\u0026gt; \u0026lt;/profile\u0026gt; \u0026lt;/profiles\u0026gt;\r","date":"0001-01-01","id":8,"permalink":"/docs/commencer-avec-maven/le-fichier-pom/","summary":"\u003cp\u003e\u003ca href=\"http://maven.apache.org/pom.html\"\u003eRéférence\u003c/a\u003e\u003c/p\u003e\n\u003ch1 id=\"le-minimum\"\u003eLe minimum\u003c/h1\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;project\u003c/span\u003e \u003cspan class=\"na\"\u003exmlns=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://maven.apache.org/POM/4.0.0\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"na\"\u003exmlns:xsi=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"na\"\u003exsi:schemaLocation=\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;http://maven.apache.org/POM/4.0.0\n\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"s\"\u003e                      http://maven.apache.org/xsd/maven-4.0.0.xsd\u0026#34;\u003c/span\u003e\u003cspan class=\"nt\"\u003e\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;modelVersion\u0026gt;\u003c/span\u003e4.0.0\u003cspan class=\"nt\"\u003e\u0026lt;/modelVersion\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;groupId\u0026gt;\u003c/span\u003ere.dufau\u003cspan class=\"nt\"\u003e\u0026lt;/groupId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;artifactId\u0026gt;\u003c/span\u003emy-app\u003cspan class=\"nt\"\u003e\u0026lt;/artifactId\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;version\u0026gt;\u003c/span\u003e1\u003cspan class=\"nt\"\u003e\u0026lt;/version\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e  \u003cspan class=\"nt\"\u003e\u0026lt;packaging\u0026gt;\u003c/span\u003ejar\u003cspan class=\"nt\"\u003e\u0026lt;/packaging\u0026gt;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"nt\"\u003e\u0026lt;/project\u0026gt;\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eLes coordonnées maven pour assurer l\u0026rsquo;unicité d\u0026rsquo;un artifact globalement :\u003c/p\u003e","tags":[],"title":"Le fichier POM"},{"content":"Les dépendances maven reposent sur un système de référentiel. Par défaut elle sont recherchées sur maven central : https://repo.maven.apache.org/maven2\nOn peut dans ses configurations préciser d\u0026rsquo;autres référentiels pour aller chercher les dépendances, ou paramétrer un miroir.\nDéfinition d\u0026rsquo;une dépendances Une dépendance consiste à aller charger un autre projet maven, on va donc retourver les éléments indispensables à la déclaration d\u0026rsquo;un projet : groupId, artifactId et version.\n\u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;re.dufau\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mon.autre.projet\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2.3\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;\rIl y a cependant d\u0026rsquo;autres paramètres requis mais ils ont des valeurs par défaut.\nLe type Généralement, on va se servir d\u0026rsquo;un dépendance pour récupérer du code sous la forme de classes compilées dans un jar.\nLe type est donc généralement jar, il s\u0026rsquo;agit de la valeur par défaut.\nCependant il peut être de type pom dans un cas spécifique présenté plus tard\nLe scope Il permet de préciser l\u0026rsquo;usage de la dépendance, par défaut le scope est compile\ncompile : la dépendance sert dans le code \u0026lsquo;main\u0026rsquo; et doit être incluse au livrable test : la dépendance ne sert que pour l\u0026rsquo;éxécution des test (ex : jUnit), elle n\u0026rsquo;est pas utilisé pour la compilation de \u0026lsquo;main\u0026rsquo; et ne sera pas incluse au livrable (les IDE ne la résolve donc pas dans \u0026lsquo;main\u0026rsquo;) provided: la dépendance sert dans le code \u0026lsquo;main\u0026rsquo; mais ne doit pas être inclus au livrable car sera disponible par ailleurs au runtime (cas de certaines librairies tomcat par exemple) runtime: non nécessaire à la compilation de \u0026lsquo;main\u0026rsquo; mais nécessaire à l\u0026rsquo;éxécution (cas de Class.forName()) Les dépendances transitives Un bibilothèque mise en dépendance peut également déclarer ses propres dépendances. Elles seront alors automatiquement intégrées au projet.\nSi A --\u0026gt; B et B --\u0026gt; C\u0026amp;D Alors A --\u0026gt; B\u0026amp;C\u0026amp;D\nIl est possible d\u0026rsquo;exclure certaines dépendances venant avec la librairie\n\u0026lt;exclusions\u0026gt; \u0026lt;exclusion\u0026gt; \u0026lt;groupId\u0026gt;commons-logging\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;commons-logging\u0026lt;/artifactId\u0026gt; \u0026lt;/exclusion\u0026gt; \u0026lt;/exclusions\u0026gt;\rCependant, le code peut utiliser une dépendance qu\u0026rsquo;on a pas explicitement déclaré, ce qui peut être dangereux en maintenance\nSélection de version Mais que se passe-t-il si la même dépendance est déclarées dans plusieurs dépendances, et même directement dans nos dépendances, le tout en plusieures versions différente ?\nRevenons sur la déclaration de la dépendance\n\u0026lt;version\u0026gt;1.0\u0026lt;/version\u0026gt;\rIl s\u0026rsquo;agit alors d\u0026rsquo;une simple indication de la version souhaitée, on n\u0026rsquo;aura pas la garantie d\u0026rsquo;avoir au final cette version si d\u0026rsquo;autres dépendances requierent des dépendances transitives plus stricte\nSi nos dépendances et toutes les dépendances transitives utilisent cette syntaxe, la version retenue sera :\n1 - notre version déclarée le cas échéant 2 - l\u0026rsquo;une des version transitive selon l\u0026rsquo;ordre de déclaration Remarque : il n\u0026rsquo;y a pas détermination de la version \u0026ldquo;la plus récente\u0026rdquo; par exemple\nÊtre précis sur les versions Le système sera un peu plus complexe si certaines déclaration demande une version plus précise, ce qui peut parfois être cependant préférable pour s\u0026rsquo;assurer d\u0026rsquo;avoir par exemple au moins la premiere version ayant telle ou telle feature.\nLa déclaration se fait alors via un sytème d\u0026rsquo;intervalles\n\u0026lt;version\u0026gt;[1.0]\u0026lt;/version\u0026gt;\rLa 1.0 et rien d\u0026rsquo;autre\n\u0026lt;version\u0026gt;[1.0)\u0026lt;/version\u0026gt;\rLa 1.0 et toutes les version supérieures\n\u0026lt;version\u0026gt;(,1.0),(1.0,)\u0026lt;/version\u0026gt;\rTout sauf la 1.0\n\u0026lt;version\u0026gt;[1.0,2.0)\u0026lt;/version\u0026gt;\rN\u0026rsquo;importe quelle version superieure ou égale à 1.0 et strictement inférieure à la 2.0\nMaven cherchera un compromis entre version souhaitées mais il risque d\u0026rsquo;y avoir un blocage de compilation en cas de 2 demandes strictes irréconciliables.\npar exemple :\n\u0026lt;version\u0026gt;(,1.0],[2.0,)\u0026lt;/version\u0026gt;\ren meme temps que\n\u0026lt;version\u0026gt;[1.5]\u0026lt;/version\u0026gt;\rConnaitre les résolutions de version effectives mvn dependency:tree -Dverbose\nEléments avancés Il est par exemple possible\nde préciser la version de compilation le cas échéant : \u0026lt;classifier\u0026gt;jdk8\u0026lt;/classifier\u0026gt; De préciser que l\u0026rsquo;on cherche juste à forcer une version dans les différentes dépendances transitives : \u0026lt;optional\u0026gt;true\u0026lt;/optional\u0026gt; Plus de détails :\nhttps://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html\n","date":"0001-01-01","id":9,"permalink":"/docs/commencer-avec-maven/la-gestion-des-d%C3%A9pendances/","summary":"\u003cp\u003eLes dépendances maven reposent sur un système de référentiel.\nPar défaut elle sont recherchées sur maven central : https://repo.maven.apache.org/maven2\u003c/p\u003e\n\u003cp\u003eOn peut dans ses configurations préciser d\u0026rsquo;autres référentiels pour aller chercher les dépendances, ou paramétrer un miroir.\u003c/p\u003e","tags":[],"title":"La gestion des dépendances"},{"content":"En maven, toutes les exécution sont des goals contenues dans des plugins, les mapping phase-\u0026gt;goals des plugins essentiels étant définis par défaut.\nDéclaration d\u0026rsquo;un plugin Exemple : le plugin de compilation\npar défaut dans le \u0026ldquo;super pom\u0026rdquo; :\n\u0026lt;plugin\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.1\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;default-compile\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;compile\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;compile\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;default-testCompile\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;test-compile\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;testCompile\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt;\rOn le configure de façon \u0026ldquo;cachée\u0026rdquo; via la propriété \u0026lt;maven.compiler.release\u0026gt;17\u0026lt;/maven.compiler.release\u0026gt; mais on peut également à la place surcharger la déclaration du plugin via :\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;release\u0026gt;17\u0026lt;release\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt;\rCe qui donnera dans le pom effectif\n\u0026lt;build\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;3.8.0\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;release\u0026gt;17\u0026lt;/release\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;compile\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;compile\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;compile\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; ... \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; \u0026lt;/plugins\u0026gt; \u0026lt;/build\u0026gt;\rUtilisation d\u0026rsquo;un plugin Directement par le goal voulu mvn compile:compile\nEn le liant à une des phase du cycle de vie par execution \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;id\u0026gt;compile\u0026lt;/id\u0026gt; \u0026lt;phase\u0026gt;compile\u0026lt;/phase\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;compile\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; ... \u0026lt;/executions\u0026gt;\rRAPPEL des mappings par défaut : http://maven.apache.org/guides/introduction/introduction-to-the-lifecycle.html#Built-in_Lifecycle_Bindings)\nQuelques plugins Spotless plugin : formatter son code\nhttps://github.com/diffplug/spotless\nexemple de déclaration :\n\u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;com.diffplug.spotless\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spotless-maven-plugin\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;${spotless.version}\u0026lt;/version\u0026gt; \u0026lt;configuration\u0026gt; \u0026lt;formats\u0026gt; \u0026lt;format\u0026gt; \u0026lt;indent\u0026gt; \u0026lt;spaces\u0026gt;true\u0026lt;/spaces\u0026gt; \u0026lt;spacesPerTab\u0026gt;4\u0026lt;/spacesPerTab\u0026gt; \u0026lt;/indent\u0026gt; \u0026lt;/format\u0026gt; \u0026lt;/formats\u0026gt; \u0026lt;java\u0026gt; \u0026lt;googleJavaFormat\u0026gt; \u0026lt;version\u0026gt;1.8\u0026lt;/version\u0026gt; \u0026lt;style\u0026gt;AOSP\u0026lt;/style\u0026gt; \u0026lt;reflowLongStrings\u0026gt;true\u0026lt;/reflowLongStrings\u0026gt; \u0026lt;/googleJavaFormat\u0026gt; \u0026lt;/java\u0026gt; \u0026lt;/configuration\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;check\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;phase\u0026gt;validate\u0026lt;/phase\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt;\rou d\u0026rsquo;exécution ponctuelle :\nmvn spotless:apply\rMaven surefire plugin : intégré d\u0026rsquo;office, parfois à paramétrer Lancer les tests unitaire\nhttps://maven.apache.org/surefire/maven-surefire-plugin/usage.html\nMaven failsafe plugin Lancer les tests d\u0026rsquo;intégration\nhttps://maven.apache.org/surefire/maven-failsafe-plugin/usage.html\nJaCoCo Mesurer la couverture de test\nhttps://www.eclemma.org/jacoco/trunk/doc/maven.html\nSonar\nhttps://docs.sonarqube.org/latest/analysis/scan/sonarscanner-for-maven/\nMaven Assembly plugin Préciser un artifact personnalisé\nhttp://maven.apache.org/plugins/maven-assembly-plugin/\nDescription xml du livrable, par exemple obtenir un zip contenant le jar + tous les jar de dépendances :\n\u0026lt;assembly xmlns=\u0026#34;http://maven.apache.org/ASSEMBLY/2.1.0\u0026#34; xmlns:xsi=\u0026#34;http://www.w3.org/2001/XMLSchema-instance\u0026#34; xsi:schemaLocation=\u0026#34;http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd\u0026#34;\u0026gt;\r\u0026lt;id\u0026gt;zip\u0026lt;/id\u0026gt;\r\u0026lt;formats\u0026gt;\r\u0026lt;format\u0026gt;zip\u0026lt;/format\u0026gt;\r\u0026lt;/formats\u0026gt;\r\u0026lt;includeBaseDirectory\u0026gt;false\u0026lt;/includeBaseDirectory\u0026gt;\r\u0026lt;fileSets\u0026gt;\r\u0026lt;fileSet\u0026gt;\r\u0026lt;directory\u0026gt;target\u0026lt;/directory\u0026gt;\r\u0026lt;outputDirectory /\u0026gt;\r\u0026lt;includes\u0026gt;\r\u0026lt;include\u0026gt;*.jar\u0026lt;/include\u0026gt;\r\u0026lt;/includes\u0026gt;\r\u0026lt;/fileSet\u0026gt;\r\u0026lt;/fileSets\u0026gt;\r\u0026lt;dependencySets\u0026gt;\r\u0026lt;dependencySet\u0026gt;\r\u0026lt;outputDirectory\u0026gt;/lib\u0026lt;/outputDirectory\u0026gt;\r\u0026lt;/dependencySet\u0026gt;\r\u0026lt;/dependencySets\u0026gt;\r\u0026lt;/assembly\u0026gt;\rA configurer à la phase package :\n\u0026lt;plugin\u0026gt;\r\u0026lt;artifactId\u0026gt;maven-assembly-plugin\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;3.3.0\u0026lt;/version\u0026gt;\r\u0026lt;configuration\u0026gt;\r\u0026lt;descriptors\u0026gt;\r\u0026lt;descriptor\u0026gt;src/assembly/zip.xml\u0026lt;/descriptor\u0026gt;\r\u0026lt;/descriptors\u0026gt;\r\u0026lt;appendAssemblyId\u0026gt;false\u0026lt;/appendAssemblyId\u0026gt;\r\u0026lt;finalName\u0026gt;mon-batch-${project.version}\u0026lt;/finalName\u0026gt;\r\u0026lt;/configuration\u0026gt;\r\u0026lt;executions\u0026gt;\r\u0026lt;execution\u0026gt;\r\u0026lt;phase\u0026gt;package\u0026lt;/phase\u0026gt;\r\u0026lt;goals\u0026gt;\r\u0026lt;goal\u0026gt;single\u0026lt;/goal\u0026gt;\r\u0026lt;/goals\u0026gt;\r\u0026lt;/execution\u0026gt;\r\u0026lt;/executions\u0026gt;\r\u0026lt;/plugin\u0026gt;\rMaven Exec plugin Excution d\u0026rsquo;executable (par exemple avant un test d\u0026rsquo;intégration)\nhttps://www.mojohaus.org/exec-maven-plugin/\nMaven Build Helper plugin Ensemble d\u0026rsquo;aide à la construction (récupération ip locale, ajout de source au classpath)\nhttps://www.mojohaus.org/build-helper-maven-plugin/plugin-info.html\nMaven Versions plugin Gérer les Versions\nhttps://www.mojohaus.org/versions/versions-maven-plugin/\nCargo plugin Lancer un tomcat avec votre war (par exemple avant un test d\u0026rsquo;intégration)\nhttps://codehaus-cargo.github.io/cargo/Home.html\nDependency check Controler les CVE des librairies\nhttps://jeremylong.github.io/DependencyCheck/dependency-check-maven/\n\u0026ndash;\nExemple de déclaration :\n\u0026lt;project\u0026gt; ... \u0026lt;build\u0026gt; ... \u0026lt;plugins\u0026gt; ... \u0026lt;plugin\u0026gt; \u0026lt;groupId\u0026gt;org.owasp\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;dependency-check-maven\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;6.1.5\u0026lt;/version\u0026gt; \u0026lt;executions\u0026gt; \u0026lt;execution\u0026gt; \u0026lt;goals\u0026gt; \u0026lt;goal\u0026gt;check\u0026lt;/goal\u0026gt; \u0026lt;/goals\u0026gt; \u0026lt;/execution\u0026gt; \u0026lt;/executions\u0026gt; \u0026lt;/plugin\u0026gt; ... \u0026lt;/plugins\u0026gt; ... \u0026lt;/build\u0026gt; ... \u0026lt;/project\u0026gt;\rCa marche parce que par défaut le goal \u0026ldquo;check\u0026rdquo; de dependency check s\u0026rsquo;éxécute à la phase \u0026ldquo;verify\u0026rdquo;\n","date":"0001-01-01","id":10,"permalink":"/docs/commencer-avec-maven/les-plugins/","summary":"\u003cp\u003eEn maven, toutes les exécution sont des goals contenues dans des plugins, les mapping phase-\u0026gt;goals des plugins essentiels étant définis par défaut.\u003c/p\u003e","tags":[],"title":"Les plugins"},{"content":" Un POM peut hériter d\u0026rsquo;un autre (avec le type pom). Un projet peut définir plusieurs modules qui seront liés entre eux Découper en modules On va découper un projet initial en plusieurs projet maven indépendant du point de vue du format (ils ont chacun leur pom, leur arborescence de source, \u0026hellip;). Admettons l\u0026rsquo;architecture après découpage :\n|\r|--api\r|--pom.xml\r`--src ...\r|--core\r|--pom.xml\r`--src ...\r`--batch\r|--pom.xml\r`--src ...\rPour présenter cet ensemble comme un prjet maven multi module, on va rajouter un pom dans le dossier racine. Ce pom sera le pom parent du projet. Il va devoir au mimimum contenir les conf suivantes :\npasser au type pom lister les dossiers correspondants aux modules \u0026lt;packaging\u0026gt;pom\u0026lt;/packaging\u0026gt; \u0026lt;modules\u0026gt; \u0026lt;module\u0026gt;api\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;core\u0026lt;/module\u0026gt; \u0026lt;module\u0026gt;batch\u0026lt;/module\u0026gt; \u0026lt;/modules\u0026gt;\rAttention, il s\u0026rsquo;agit du nom des fichiers et non pas des artifactId (qui pourront donc être différent du nom des dossiers).\nDu point de vue des modules, il va falloir déclarer l\u0026rsquo;héritage de ce pom parent.\n\u0026lt;!-- Héritage du POM général--\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;group.id\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;pom-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;version\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt;\rAttention : en découpant en module, on rajoute des dépendances entre les modules qui n\u0026rsquo;existaient a fortiori pas avant découpage. L\u0026rsquo;ordre de ces dépendance impactera l\u0026rsquo;ordre d\u0026rsquo;exécution des modules maven.\nLe pom parent Au delà du découpage en module, le pom parent permet de mutualiser des configurations. Tout projet maven récupèra :\nles propriétés les dépendences et gestion des dépendances les plugins et gestion des plugins Il faut éviter de déclarer toutes les dépendances du projet dans le pom parent, car des modules se retourveront avec des dépendances non nécessaire \u0026ldquo;unitairement\u0026rdquo; au module.\nCependant on sohaite quand même concentrer le maximum de configuration dans le pom parent, qui peut servir d\u0026rsquo;index des dépendances et plugins utilisés avec leur versions notamment.\nLe dependencyManagement \u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;test\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;a\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.2\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt; On s\u0026rsquo;en sert pour paramétrer globalement la version des dépendances sans charger la dépendance dans le projet parent\nLa déclaration sera alors minimale dans l\u0026rsquo;utilisation dans les projets fils :\n\u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;test\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;a\u0026lt;/artifactId\u0026gt; \u0026lt;/dependency\u0026gt; ... \u0026lt;dependencies\u0026gt;\rL\u0026rsquo;IDE va généralement alerter si on surcharge la version.\nCe principe de management s\u0026rsquo;applique à toutes les conf de la dépendance telles que le scope.\nMettre à jour toutes les références à la version des modules Plugin \u0026ldquo;version\u0026rdquo; :\nmvn versions:set -DnewVersion=1.2.3 Des pom parents externes : le cas de Spring Boot \u0026lt;!-- Héritage Spring--\u0026gt; \u0026lt;parent\u0026gt; \u0026lt;groupId\u0026gt;org.springframework.boot\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;spring-boot-starter-parent\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;2.4.0\u0026lt;/version\u0026gt; \u0026lt;/parent\u0026gt;\rComme pour les dépendances, il existe un pluginManagement pour préconfigurer des plugin sans les éxécuter :\n\u0026lt;pluginManagement\u0026gt; \u0026lt;plugins\u0026gt; \u0026lt;plugin\u0026gt; ...\rHéritage multiple ? Sous module qui a besoin spécifiquement d\u0026rsquo;un autre parent ? Besoin de plusieurs dependencyManagment ? =\u0026gt; on va récupérer uniquement ce qui nous interesse dans l\u0026rsquo;héritage\nOn peut récupérer et \u0026ldquo;combiner\u0026rdquo; plusieurs dependencyManagement\non passe par un BOM (Bill Of Materials)\n\u0026lt;dependencyManagement\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;test\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;test-BOM\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;0.0.1-SNAPSHOT\u0026lt;/version\u0026gt; \u0026lt;type\u0026gt;pom\u0026lt;/type\u0026gt; \u0026lt;scope\u0026gt;import\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; \u0026lt;/dependencyManagement\u0026gt;\r","date":"0001-01-01","id":11,"permalink":"/docs/commencer-avec-maven/les-modules-et-les-h%C3%A9ritages/","summary":"\u003cul\u003e\n\u003cli\u003eUn POM peut hériter d\u0026rsquo;un autre (avec le type pom).\u003c/li\u003e\n\u003cli\u003eUn projet peut définir plusieurs \u003cstrong\u003emodules\u003c/strong\u003e qui seront liés entre eux\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"découper-en-modules\"\u003eDécouper en modules\u003c/h1\u003e\n\u003cp\u003eOn va découper un projet initial en plusieurs projet maven indépendant du point de vue du format (ils ont chacun leur pom, leur arborescence de source, \u0026hellip;).\nAdmettons l\u0026rsquo;architecture après découpage :\u003c/p\u003e","tags":[],"title":"Les modules et les héritages"},{"content":"Nouveau projet Maven utiliser un standard pour créer un projet maven mvn archetype:generate\nPour un projet spring boot, le spring initilizr https://start.spring.io/ crée tout ce qu\u0026rsquo;il faut si on lui demande un projet maven Déployer sur un repository maven (privé) Si notre projet peut servir de dépendance à un autre projet, il peut être nécessaire de le rendre facilement accessible aux autres projet.\n(On ne détaille pas ici le mode de livraison sur maven central)\nIl y a conventionnellement deux types dépôts :\nrelease : les version immuables, elles ne doivent JAMAIS être réécrite, les systèmes les considèrent en cache infini en cas de miroir snapshots : les versions en cours. A l\u0026rsquo;opposé elles sont censées être volatiles. Le numéro de version doit se terminer par -SNAPSHOT On peut déclarer dans les configurations maven les urls des dépôts release et snapshots. Ils y seront envoyés lors de la phase deploy. Ces conf sont surchargeable en ligne de commande : -DaltDeployementRepository=\u0026lt;id\u0026gt;::default::\u0026lt;url\u0026gt;\nRemarque, pour les dépôt non maven (déôt brut du jar ou war), il y a le plugin wagon, il est cependant devenu plus maintenable de définir ses déploiement non maven directement dans son script CI/CD.\nBonnes pratiques On ne commit rien d\u0026rsquo;autre que\nprojet\r|--src/\r|--pom.xml\rPOM le plus petit possible Version de dépendences centralisées (DependecyManagement + properties) Créer son propre plugin https://maven.apache.org/guides/plugin/guide-java-plugin-development.html\nOptions avancées de jvm Il est possible de définir des options à rajouter au démarrage de la jvm par maven\nFichier .mvn/jvm.config --add-opens java.base/java.lang=ALL-UNNAMED\r","date":"0001-01-01","id":12,"permalink":"/docs/compl%C3%A9ments/compl%C3%A9ments/","summary":"\u003ch2 id=\"nouveau-projet-maven\"\u003eNouveau projet Maven\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eutiliser un standard pour créer un projet maven\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ccode\u003emvn archetype:generate\u003c/code\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ePour un projet spring boot, le spring initilizr https://start.spring.io/ crée tout ce qu\u0026rsquo;il faut si on lui demande un projet maven\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"déployer-sur-un-repository-maven-privé\"\u003eDéployer sur un repository maven (privé)\u003c/h2\u003e\n\u003cp\u003eSi notre projet peut servir de dépendance à un autre projet, il peut être nécessaire de le rendre facilement accessible aux autres projet.\u003c/p\u003e","tags":[],"title":"Compléments"},{"content":"","date":"2023-09-07","id":13,"permalink":"/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":14,"permalink":"/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"La formation maven propose :\nUne compréhension des enjeux d\u0026rsquo;un système automatisé de build : Les opération requises pour obtenir un livrable déployable Les opération souhaitées tels que les tests Comment ces opérations se font avec uniquement le jdk à disposition Une présentation de comment maven va automatiser ces différentes opération L\u0026rsquo;installation et l\u0026rsquo;éxécution de maven La configuration de maven Quelques éléments de configuration avancés tels que : le découpage en module l\u0026rsquo;utilisation de parent communautaire (spring boot) l\u0026rsquo;utilisation de plugins spécifiques Tps\n","date":"2023-09-07","id":15,"permalink":"/","summary":"\u003cp\u003eLa formation maven propose :\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eUne compréhension des enjeux d\u0026rsquo;un système automatisé de build :\n\u003cul\u003e\n\u003cli\u003eLes opération requises pour obtenir un livrable déployable\u003c/li\u003e\n\u003cli\u003eLes opération souhaitées tels que les tests\u003c/li\u003e\n\u003cli\u003eComment ces opérations se font avec uniquement le jdk à disposition\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003eUne présentation de comment maven va automatiser ces différentes opération\u003c/li\u003e\n\u003cli\u003eL\u0026rsquo;installation et l\u0026rsquo;éxécution de maven\u003c/li\u003e\n\u003cli\u003eLa configuration de maven\u003c/li\u003e\n\u003cli\u003eQuelques éléments de configuration avancés tels que :\n\u003cul\u003e\n\u003cli\u003ele découpage en module\u003c/li\u003e\n\u003cli\u003el\u0026rsquo;utilisation de parent communautaire (spring boot)\u003c/li\u003e\n\u003cli\u003el\u0026rsquo;utilisation de plugins spécifiques\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/clement-dufaure/formation-maven\"\u003eTps\u003c/a\u003e\u003c/p\u003e","tags":[],"title":"Formation maven"},{"content":"","date":"0001-01-01","id":16,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":17,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":18,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"}]