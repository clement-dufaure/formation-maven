<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Commencer avec Maven on</title><link>https://formation-maven.dufau.re/docs/commencer-avec-maven/</link><description>Recent content in Commencer avec Maven on</description><generator>Hugo -- gohugo.io</generator><language>fr-FR</language><atom:link href="https://formation-maven.dufau.re/docs/commencer-avec-maven/index.xml" rel="self" type="application/rss+xml"/><item><title>Installer et exécuter maven</title><link>https://formation-maven.dufau.re/docs/commencer-avec-maven/install-maven/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://formation-maven.dufau.re/docs/commencer-avec-maven/install-maven/</guid><description>L&amp;rsquo;exécutable maven # Installation de maven # Maven est un programme écrit en java, l&amp;rsquo;environnement java doit être correctement paramétré (soit via la variable d&amp;rsquo;environnement JAVA_HOME, soit en ayant correctement configuré java dans le path)
Télécharger et extraire l&amp;rsquo;archive sur le site de maven (https://maven.apache.org/download.cgi). Ajouter le dossier /bin au path pour une exécution en ligne de commande mvn -v Le maven wrapper # Les projets peuvent intégrer directement l&amp;rsquo;exécutable maven dans leurs sources.</description></item><item><title>Bases de fonctionnement de maven</title><link>https://formation-maven.dufau.re/docs/commencer-avec-maven/lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://formation-maven.dufau.re/docs/commencer-avec-maven/lifecycle/</guid><description>Les plugins et goals # Dans maven, tout est plugin. Les plugins contiennent le code des exécutions exposés comme &amp;ldquo;goals&amp;rdquo;. Une exécution se déclenche avec la syntaxe :
mvn nom-du-plugin:version:nom-du-goal Si le nom du plugin correspond à la syntaxe maven-PPP-plugin, si une version est défini dans le pom (on voir ça plus tard), on peut plus simplement l&amp;rsquo;appeler :
mvn PPP:nom-du-goal Par exemple, la compilation du code se fait avec le plugin maven-compiler-plugin, il possède deux goals compile pour compiler le code principal et testCompile pour compiler le code de test.</description></item><item><title>Le fichier POM</title><link>https://formation-maven.dufau.re/docs/commencer-avec-maven/pom/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://formation-maven.dufau.re/docs/commencer-avec-maven/pom/</guid><description>Référence
Le minimum # &amp;lt;project xmlns=&amp;quot;http://maven.apache.org/POM/4.0.0&amp;quot; xmlns:xsi=&amp;quot;http://www.w3.org/2001/XMLSchema-instance&amp;quot; xsi:schemaLocation=&amp;quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&amp;quot;&amp;gt; &amp;lt;modelVersion&amp;gt;4.0.0&amp;lt;/modelVersion&amp;gt; &amp;lt;groupId&amp;gt;re.dufau&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;my-app&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1&amp;lt;/version&amp;gt; &amp;lt;packaging&amp;gt;jar&amp;lt;/packaging&amp;gt; &amp;lt;/project&amp;gt; Les coordonnées maven pour assurer l&amp;rsquo;unicité d&amp;rsquo;un artifact globalement :
groupId : identifiant de l&amp;rsquo;organisation, de l&amp;rsquo;équipe réalisatrice, etc artifactId : le nom du projet/de l&amp;rsquo;application (ou du module dans le cas de projets multimodule) version : la version de l&amp;rsquo;artifact produit Le principe de convention cache l&amp;rsquo;existence d&amp;rsquo;un super POM contenant toutes les valeurs par défaut dont :</description></item><item><title>La gestion des dépendances</title><link>https://formation-maven.dufau.re/docs/commencer-avec-maven/dependances/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://formation-maven.dufau.re/docs/commencer-avec-maven/dependances/</guid><description>Les dépendances maven reposent sur un système de référentiel. Par défaut elle sont recherchées sur maven central : https://repo.maven.apache.org/maven2
On peut dans ses configurations préciser d&amp;rsquo;autres référentiels pour aller chercher les dépendances, ou paramétrer un miroir.
Définition d&amp;rsquo;une dépendances # Une dépendance consiste à aller charger un autre projet maven, on va donc retourver les éléments indispensables à la déclaration d&amp;rsquo;un projet : groupId, artifactId et version.
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;re.dufau&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mon.autre.projet&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.</description></item><item><title>Les plugins</title><link>https://formation-maven.dufau.re/docs/commencer-avec-maven/plugins/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://formation-maven.dufau.re/docs/commencer-avec-maven/plugins/</guid><description>En maven, toutes les exécution sont des goals contenues dans des plugins, les mapping phase-&amp;gt;goals des plugins essentiels étant définis par défaut.
Déclaration d&amp;rsquo;un plugin # Exemple : le plugin de compilation
par défaut dans le &amp;ldquo;super pom&amp;rdquo; :
&amp;lt;plugin&amp;gt; &amp;lt;artifactId&amp;gt;maven-compiler-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.1&amp;lt;/version&amp;gt; &amp;lt;executions&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;default-compile&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;compile&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;compile&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;execution&amp;gt; &amp;lt;id&amp;gt;default-testCompile&amp;lt;/id&amp;gt; &amp;lt;phase&amp;gt;test-compile&amp;lt;/phase&amp;gt; &amp;lt;goals&amp;gt; &amp;lt;goal&amp;gt;testCompile&amp;lt;/goal&amp;gt; &amp;lt;/goals&amp;gt; &amp;lt;/execution&amp;gt; &amp;lt;/executions&amp;gt; &amp;lt;/plugin&amp;gt; On le configure de façon &amp;ldquo;cachée&amp;rdquo; via la propriété &amp;lt;maven.compiler.release&amp;gt;17&amp;lt;/maven.compiler.release&amp;gt; mais on peut également à la place surcharger la déclaration du plugin via :</description></item><item><title>Les modules et les héritages</title><link>https://formation-maven.dufau.re/docs/commencer-avec-maven/modules/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://formation-maven.dufau.re/docs/commencer-avec-maven/modules/</guid><description>Un POM peut hériter d&amp;rsquo;un autre (avec le type pom). Un projet peut définir plusieurs modules qui seront liés entre eux Découper en modules # On va découper un projet initial en plusieurs projet maven indépendant du point de vue du format (ils ont chacun leur pom, leur arborescence de source, &amp;hellip;). Admettons l&amp;rsquo;architecture après découpage :
| |--api |--pom.xml `--src ... |--core |--pom.xml `--src ... `--batch |--pom.xml `--src .</description></item></channel></rss>