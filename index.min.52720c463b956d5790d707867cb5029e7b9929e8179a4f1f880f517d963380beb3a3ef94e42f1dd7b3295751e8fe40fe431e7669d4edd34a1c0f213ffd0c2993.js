var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(n){const s=suggestions.classList.contains("d-none");if(s)return;const e=[...suggestions.querySelectorAll("a")];if(e.length===0)return;const t=e.indexOf(document.activeElement);if(n.key==="ArrowUp"){n.preventDefault();const s=t>0?t-1:0;e[s].focus()}else if(n.key==="ArrowDown"){n.preventDefault();const s=t+1<e.length?t+1:t;e[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/sans-maven/",title:"Sans Maven",description:"",content:""}).add({id:1,href:"/docs/commencer-avec-maven/",title:"Commencer avec Maven",description:"",content:""}).add({id:2,href:"/docs/sans-maven/sans-maven/",title:"Comment builder un projet avec uniquement le JDK ?",description:"Qu\u0026rsquo;est ce que \u0026ldquo;builder un projet\u0026rdquo; ??\nou De quoi va-t-on parler ?\n Exécuter du code java Exécuter conjointement plusieurs classes ensemble Utiliser du code de biliothèques externes Changer la version d\u0026rsquo;un bibliothèque Préparer un déploiement : fournir un jar/war Lancer des tests unitaires ?  Compiler son code #  Compilation d\u0026rsquo;une classes  javac ./src/re/dufau/demo/model/User.java -d ./build/classes javac ./src/re/dufau/demo/dao/UserDao.java -d ./build/classes  1er problème : les classes s\u0026rsquo;appellent entre elles",content:"Qu\u0026rsquo;est ce que \u0026ldquo;builder un projet\u0026rdquo; ??\nou De quoi va-t-on parler ?\n Exécuter du code java Exécuter conjointement plusieurs classes ensemble Utiliser du code de biliothèques externes Changer la version d\u0026rsquo;un bibliothèque Préparer un déploiement : fournir un jar/war Lancer des tests unitaires ?  Compiler son code #  Compilation d\u0026rsquo;une classes  javac ./src/re/dufau/demo/model/User.java -d ./build/classes javac ./src/re/dufau/demo/dao/UserDao.java -d ./build/classes  1er problème : les classes s\u0026rsquo;appellent entre elles\n Compilation de plusieurs classes \u0026ldquo;ensemble\u0026rdquo;  echo src/re/dufau/demo/dao/UserDao.java \u0026gt; ./build/sources.txt echo src/re/dufau/demo/model/User.java \u0026gt;\u0026gt; ./build/sources.txt javac @./build/sources.txt -d ./build/classes   Compilation de toutes les classes  find src -name \u0026quot;*.java\u0026quot; \u0026gt; ./build/sources.txt javac @./build/sources.txt -d ./build/classes  2e problème : le dev a utilisé des bibliothèques externes\n-\u0026gt; Il faut télécharger les librairies nécessaires : création du classpath avec les jar externes requis\nfind src -name \u0026quot;*.java\u0026quot; \u0026gt; ./build/sources.txt javac @./build/sources.txt -d ./build/classes -cp \u0026quot;./classpath/cmain/*\u0026quot;  3e problème : les jars que l\u0026rsquo;on récupère ont eux aussi des dépendances\u0026hellip; Bienvenue aux dépendances transitives :\nIl faut le savoir (doc de la lib) et les rajouter dans le classpath Il faut faire attention au croisement des version, on ne pourra mettre qu\u0026rsquo;une version de chaque fichier .class au risque de conflits\nEt si on doit changer la version, il faut tout recommencer\u0026hellip; ajouter/retirer un fichier jar dans le classpath\u0026hellip; et adapter les transitives\nRemarque : on peut préciser la version de java dans laquelle est écrite java et la version de compilation des fichiers compilés\njavac @./build/sources.txt -d ./build/classes -source 11 -target 11  Création du livrable # \u0026ldquo;livrable\u0026rdquo; = moyen de tranfert standard\n le JAR = java archive C\u0026rsquo;est un zip contenant les classes compilées (et des métadonnées dans un dossier META-INF) Il permet l\u0026rsquo;échange de code (bibliothèque de dépendance). Il peut être excutable : présence d\u0026rsquo;une méthode main(), lancement via java -jar  META-INF/ MANIFEST.MF re/ dufau/ demo/ model/ User.class ...   le WAR = web application archive C\u0026rsquo;est un zip contenant les classes compilées et les fichiers web (jsp/html/css\u0026hellip;). C\u0026rsquo;est un \u0026ldquo;bout\u0026rdquo; d\u0026rsquo;application, le reste de l\u0026rsquo;appli (dont le main()) se trouvant dans un conteneur d\u0026rsquo;application comme tomcat. Le war n\u0026rsquo;est pas prévu pour s\u0026rsquo;éxécuter seul.  META-INF/ MANIFEST.MF WEB-INF/ web.xml config-spring.xml static/ css/ style.css img/ image.png ... classes/ re/ dufau/ demo/ model/ User.class ... lib/ dependance1.jar dependance2.jar ...  Pour créer ces livrables, on peut passer par la commande jar\nFaire fonctionner le projet dans l\u0026rsquo;IDE # Dans l\u0026rsquo;IDE, ca compile pas ?\n L\u0026rsquo;IDE compile à la volée (javac) pour nous dire si tout va bien Il faut donc qu\u0026rsquo;il connaisse le classpath, à paramétrer à la main\u0026hellip; Si je transmet mon code l\u0026rsquo;autre dev doit tout reparamétrer\u0026hellip;  Lancer les tests # Logique similaire à l\u0026rsquo;éxécution de mon code\n On va devoir compiler les classes de tests Ces classes de tests vont dépendre  de mon code \u0026ldquo;runtime\u0026rdquo; des dépendances de mon code \u0026ldquo;runtime\u0026rdquo; de dépendances spécifiques à l\u0026rsquo;éxécution des tests    Ce qui donne :\njavac ./test/re/dufau/demo/dao/UserDaoTest.java -d ./build/test-classes/ -cp \u0026quot;./build/classes;./classpath/test/*\u0026quot; java -jar ./lib/test/junit-platform-console-standalone-1.10.1.jar -cp \u0026quot;./classpath/main/;./classpath/test/;./build/test-classes/;./build/classes/\u0026quot; --select-class re.dufau.demo.dao.UserDaoTest  Avez vous envie de lancer toutes ces commandes à chaque build ? # Si la réponse est non, on peut poursuivre. Des outils cherchent à faciliter et automatiser ces étapes.\n  Ant\n  Maven\n  Gradl\n  Ant\n Configuration XML Les tâches précitées sont explicitées sont la forme d\u0026rsquo;un xml, tout doit être décrit Approche impérative    Maven\n Configuration XML La logique de maven repose sur des conventions, sous réserve d\u0026rsquo;avoir une architecture de code aux stardards maven, un fichier de configuration toujours au format xml assez minimal permet de réaliser les opération précitées. Les principales opérations seront ainsi sous-entendues (non explicitées dans la conf). Logique de dépendances avec référentiel Approche déclarative    Gradl\n Approche impérative mais avec langage JVM (Groovy/Kotlin) Repose également sur un système de référentiel pour les dépendances    Au delà des opérations essentielles précentées les outils vont permettre de réaliser une multiplicité de tâches. Avec la présence quasi systèmatique de pipeline CI/CD sur nos applications, il faudra parfois choisir entre intégrer certaines tâches à travers l\u0026rsquo;outils de buils choisi, ou directement en opérations CI/CD\n"}).add({id:3,href:"/docs/commencer-avec-maven/install-maven/",title:"Installer et exécuter maven",description:"L\u0026rsquo;exécutable maven # Installation de maven # Maven est un programme écrit en java, l\u0026rsquo;environnement java doit être correctement paramétré (soit via la variable d\u0026rsquo;environnement JAVA_HOME, soit en ayant correctement configuré java dans le path)\n Télécharger et extraire l\u0026rsquo;archive sur le site de maven (https://maven.apache.org/download.cgi). Ajouter le dossier /bin au path pour une exécution en ligne de commande  mvn -v  Le maven wrapper # Les projets peuvent intégrer directement l\u0026rsquo;exécutable maven dans leurs sources.",content:"L\u0026rsquo;exécutable maven # Installation de maven # Maven est un programme écrit en java, l\u0026rsquo;environnement java doit être correctement paramétré (soit via la variable d\u0026rsquo;environnement JAVA_HOME, soit en ayant correctement configuré java dans le path)\n Télécharger et extraire l\u0026rsquo;archive sur le site de maven (https://maven.apache.org/download.cgi). Ajouter le dossier /bin au path pour une exécution en ligne de commande  mvn -v  Le maven wrapper # Les projets peuvent intégrer directement l\u0026rsquo;exécutable maven dans leurs sources. Cela permet de s\u0026rsquo;assurer de la présence de maven et de la version d\u0026rsquo;éxécution de maven.\n./mvnw -v  Configuration générale #  Propre à votre environnement de travail, autrement dit, commune à tout les projets Dans le répertoire d\u0026rsquo;installation : /conf/settings.xml -\u0026gt; Eviter de modifier celui la, il est propre uniquement à cette installation Il vaut mieux le surcharger par le fichier settings.xml dans %USERPROFILE%/.m2 ou $HOME/.m2 Il sera alors commun à toutes les installations et également aux wrappers  Execution # mvn --help usage: mvn [options] [\u0026lt;goal(s)\u0026gt;] [\u0026lt;phase(s)\u0026gt;]   goals : actions spécifiques unitaires, ils sont inclus dans des plugins maven phase : correspond aux étapes du cycle de vie du build de l\u0026rsquo;application  "}).add({id:4,href:"/docs/commencer-avec-maven/lifecycle/",title:"Bases de fonctionnement de maven",description:"Les plugins et goals # Dans maven, tout est plugin. Les plugins contiennent le code des exécutions exposés comme \u0026ldquo;goals\u0026rdquo;. Une exécution se déclenche avec la syntaxe :\nmvn nom-du-plugin:version:nom-du-goal  Si le nom du plugin correspond à la syntaxe maven-PPP-plugin, si une version est défini dans le pom (on voir ça plus tard), on peut plus simplement l\u0026rsquo;appeler :\nmvn PPP:nom-du-goal  Par exemple, la compilation du code se fait avec le plugin maven-compiler-plugin, il possède deux goals compile pour compiler le code principal et testCompile pour compiler le code de test.",content:"Les plugins et goals # Dans maven, tout est plugin. Les plugins contiennent le code des exécutions exposés comme \u0026ldquo;goals\u0026rdquo;. Une exécution se déclenche avec la syntaxe :\nmvn nom-du-plugin:version:nom-du-goal  Si le nom du plugin correspond à la syntaxe maven-PPP-plugin, si une version est défini dans le pom (on voir ça plus tard), on peut plus simplement l\u0026rsquo;appeler :\nmvn PPP:nom-du-goal  Par exemple, la compilation du code se fait avec le plugin maven-compiler-plugin, il possède deux goals compile pour compiler le code principal et testCompile pour compiler le code de test. On va appeller ces deux goals :\nmvn compiler:compile mvn compiler:testCompile  Cependant la plupart du temps on souhaite enchaîner logiquement plusieurs goals.\nLe cycle de vie du build # Maven décrit plusieurs enchaînements de phase décrivant les étapes fines de contruction d\u0026rsquo;un projet.\nLifecycle Reference\nmvn nom-de-la-phase  lancera l\u0026rsquo;ensemble des phases préalables à la phase demandée en plus de celle-ci.\nOn peut alors associer des goals à certaines phases. Par défaut, un certain nombre de goals sont déjà associé à certaines phases.\nBuilt-in_Lifecycle_Bindings\nMême si on peut théoriquement appeler toutes les phases, on appelle généralement les phases suivantes :\n validate - Valide la configuration du projet. compile - Compile le code source test - Test le projet package - Crée un fichier livrable verify - Vérifie le projet (tests d\u0026rsquo;intégration) install - Installe le livrable dans le dépot local deploy - Déploie le livrable dans le dépot distant  Configuration et conventions # Maven fonctionne par conventions. Suivre ces conventions permet de limiter le nombre de configurations à expliciter.\nArchitecture standard d\u0026rsquo;un projet Maven # projet-maven |-- pom.xml : fichier de configuration |-- src | |-- main | | |-- java : le code java principal | | | `-- re | | | `-- dufau | | | `-- App.java | | |-- resources : les fichiers non java devant être ajoutés au livrable | | `-- webapp : les ressources WEB dans le cas d'un war | `-- test | |-- java : le code java de test | | `-- re | | `-- dufau | | `-- AppTest.java | `-- resources : les fichiers non java nécessaires à l'éxécution des tests | `-- target : le répertoire de travail de maven |-- classes | `-- re | `-- dufau | `-- App.class [...] |-- surefire-reports | |-- TEST-re.dufau.AppTest.xml | `-- re.dufau.AppTest.txt `-- test-classes `-- re `-- dufau `-- AppTest.class  ⚠️ on ne veut pas partager le dossier target =\u0026gt; à ajouter au .gitignore\nLe fichier de configuration : le POM # "}).add({id:5,href:"/docs/",title:"Docs",description:"",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()